generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(cuid())
  name            String
  email           String      @unique
  password        String
  bloodGroup      BloodGroup?
  gender          Gender?
  city            String?
  area            String?
  availability    Boolean     @default(false)
  role            UserRole    @default(USER)
  status          UserStatus  @default(ACTIVE)
  isEmailVerified Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  profile           Profile?
  EmailVerification EmailVerification?

  requestsAsDonor     Request[] @relation("DonorRequests")
  requestsAsRequester Request[] @relation("RequesterRequests")
}

model Profile {
  id               String   @id @default(cuid())
  userId           String   @unique
  bio              String?
  age              Int?
  lastDonationDate String?
  photo            String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String   @unique
  code      String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])

  @@map("emailVerify")
}

model Request {
  id             String        @id @default(cuid())
  donorId        String
  requesterId    String
  name           String
  phoneNumber    String
  dateOfDonation String
  hospitalName   String
  city           String
  message        String
  status         RequestStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  donor     User @relation("DonorRequests", fields: [donorId], references: [id])
  requester User @relation("RequesterRequests", fields: [requesterId], references: [id])

  @@map("requests")
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCEL
  SUCCESSFUL
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
}
